{"version":3,"sources":["webpack:///./src/views/demo/demo.vue?a24a","webpack:///src/views/demo/demo.vue","webpack:///./src/views/demo/demo.vue?0afa","webpack:///./src/views/demo/demo.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticStyle","height","attrs","id","on","click","clickBtn","_v","staticRenderFns","demovue_type_script_lang_js_","name","methods","createMap","_createMap","Object","asyncToGenerator","regeneratorRuntime","mark","_callee","Map","Basemap","SceneView","lay","customBasemap","wrap","_context","prev","next","arcgisTools","MapView","sent","Point","BaseTileLayer","Request","geometryEngine","GraphicsLayer","Graphic","FeatureLayer","Polygon","WebTileLayer","type","color","outline","width","utils_layers","baseLayers","title","map","basemap","view","container","center","mapConfig","centerPoint","zoom","spatialReference","stop","apply","arguments","_clickBtn","_callee2","Geoprocessor","FeatureSet","GraphicLayer","gp","featureSet","params","_this","_context2","ImageParameters","features","graphic","polygon","redline","console","log","submitJob","then","result","jobStatus","getResultData","jobId","res","polySym","graphicArr","value","feature","symbol","attributes","shapearea","geodesicArea","geometry","insercLayer","addMany","add","mounted","demo_demovue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__"],"mappings":"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","file":"js/chunk-2d0b309e.397fed9a.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticStyle:{\"height\":\"500px\"},attrs:{\"id\":\"map\"}}),_c('Button',{on:{\"click\":_vm.clickBtn}},[_vm._v(\"按钮\")])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <div style=\"height: 500px\" id=\"map\">\r\n    </div>\r\n    <Button @click=\"clickBtn\">按钮</Button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport config from '../../setting/mapConfig'\r\nimport arcgisPackage from '../../utils/arcgisTools'\r\nimport { tdtlayer } from '@/utils/layers'\r\nexport default {\r\n  name: 'demo',\r\n  methods: {\r\n    async createMap () {\r\n      let MapView = await arcgisPackage.MapView\r\n      let Map = await arcgisPackage.Map\r\n      let Basemap = await arcgisPackage.Basemap\r\n      let Point = await arcgisPackage.Point\r\n      let BaseTileLayer = await arcgisPackage.BaseTileLayer\r\n      let Request = await arcgisPackage.Request\r\n      let geometryEngine = await arcgisPackage.geometryEngine\r\n      let GraphicLayer = await arcgisPackage.GraphicsLayer\r\n      let Graphic = await arcgisPackage.Graphic\r\n      let FeatureLayer = await arcgisPackage.FeatureLayer\r\n      let Polygon = await arcgisPackage.Polygon\r\n      let WebTileLayer = await arcgisPackage.WebTileLayer\r\n      let SceneView = await arcgisPackage.SceneView\r\n      let polySym = {\r\n        type: 'simple-fill', // autocasts as new SimpleFillSymbol()\r\n        color: [140, 140, 222, 0.5],\r\n        outline: {\r\n          color: [0, 0, 0, 0.5],\r\n          width: 2\r\n        }\r\n      }\r\n\r\n      /* this.layerRedLine = new FeatureLayer({\r\n        url: config.serverUrl + '/arcgis/rest/services/qhhx/hongxian/MapServer',\r\n        opacity: 0.7,\r\n        outFields: ['*'],\r\n        popupTemplate: {\r\n          title: '{name}',\r\n          content: [\r\n            {\r\n              type: 'fields',\r\n              fieldInfos: [{\r\n                fieldName: 'STATENAME',\r\n                label: '所属地区'\r\n              }, {\r\n                fieldName: '面积',\r\n                label: '面积（平方米）'\r\n              }]\r\n            }\r\n          ]\r\n        }\r\n      }) */\r\n\r\n      // 天地图影像地图\r\n      /* let TDT = BaseTileLayer.createSubclass({\r\n        properties: {\r\n          urlTemplate: null\r\n        },\r\n        getTileUrl: function (level, row, col) {\r\n          let url = 'http://t' + col % 8 + '.tianditu.gov.cn/DataServer?T=img_w&tk=12b886b3d0f324bd6032c29503972e7c&x=' + col + '&y=' + row + '&l=' + level\r\n          // var url = \"http://t0.tianditu.gov.cn/cva_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX=\"+level+\"&TILEROW=\"+row+\"&TILECOL=\"+col+\"&tk=12b886b3d0f324bd6032c29503972e7c\";\r\n          return url\r\n        },\r\n        fetchTile: function (level, row, col) {\r\n          let url = this.getTileUrl(level, row, col)\r\n          return Request(url, {\r\n            responseType: 'image'\r\n          })\r\n            .then((response) => {\r\n              let image = response.data\r\n              let width = this.tileInfo.size[0]\r\n              let height = this.tileInfo.size[0]\r\n\r\n              let canvas = document.createElement('canvas')\r\n              let context = canvas.getContext('2d')\r\n              canvas.width = width\r\n              canvas.height = height\r\n\r\n              context.drawImage(image, 0, 0, width, height)\r\n\r\n              return canvas\r\n            })\r\n        }\r\n      })\r\n\r\n      let tdtylayer = new TDT() */\r\n\r\n      /* let td = new WebTileLayer({\r\n        urlTemplate: 'http://t2.tianditu.gov.cn/img_c/wmts?tk=12b886b3d0f324bd6032c29503972e7c&TILECOL={col}&TILEROW={row}&TILEMATRIX={level}&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=c&FORMAT=tiles&SERVICE=WMTS'\r\n      }) */\r\n      let lay = await tdtlayer()\r\n      let customBasemap = new Basemap({\r\n        baseLayers: [ lay ],\r\n        title: 'Custom Basemap',\r\n        id: 'myBasemap'\r\n      })\r\n\r\n      this.map = new Map({\r\n        basemap: customBasemap\r\n      })\r\n      this.view = new SceneView({\r\n        map: this.map,\r\n        container: 'map',\r\n        center: config.centerPoint,\r\n        zoom: 7,\r\n        spatialReference: config.spatialReference\r\n      })\r\n/*      this.view.on('click', event => {\r\n        console.log(event)\r\n      })\r\n      let point = new Point({\r\n        type: 'point',\r\n        longitude: 98.880521,\r\n        latitude: 38.762178\r\n      })\r\n\r\n      let polyline = {\r\n        type: 'polyline',\r\n        paths: [\r\n          [\r\n            [98.880521, 38.762178],\r\n            [98.990521, 38.772178]\r\n          ]\r\n        ],\r\n        spatialReference: { wkid: 4326 }\r\n      }\r\n      let polygon = new Polygon({\r\n        rings: [\r\n          [\r\n            [98.880521, 38.762178],\r\n            [98.990521, 38.972178],\r\n            [98.790521, 38.672178],\r\n            [98.880521, 38.762178]\r\n          ]\r\n        ],\r\n        spatialReference: { wkid: 4326 }\r\n      })*/\r\n/*      let bufferLayer = new GraphicLayer()\r\n      this.buffer = geometryEngine.geodesicBuffer(polygon, 0.5, 'kilometers', false)\r\n      this.buffer = geometryEngine.union([this.buffer, polygon])\r\n      // console.log(this.buffer.rings[1])\r\n      this.buffer.rings.pop()\r\n      // this.buffer.removeRing(this.buffer.rings[1])\r\n      this.graphic = new Graphic({\r\n        geometry: this.buffer,\r\n        symbol: polySym\r\n      })\r\n      bufferLayer.add(this.graphic)\r\n      // this.map.add(td)\r\n      this.map.add(this.layerRedLine)\r\n      this.map.add(bufferLayer)\r\n      this.bufferLayer = bufferLayer\r\n\r\n      this.view.on('pointer-move', evt => {\r\n        point = this.view.toMap({ x: evt.x, y: evt.y })\r\n        /!* console.log(mp.x + '-' + mp.y) *!/\r\n      })*/\r\n    },\r\n    async clickBtn () {\r\n      let Geoprocessor = await arcgisPackage.Geoprocessor\r\n      let FeatureSet = await arcgisPackage.FeatureSet\r\n      let ImageParameters = await arcgisPackage.ImageParameters\r\n      let Graphic = await arcgisPackage.Graphic\r\n      let GraphicLayer = await arcgisPackage.GraphicsLayer\r\n      let geometryEngine = await arcgisPackage.geometryEngine\r\n      // let gp = new Geoprocessor('http://192.168.1.158:6080/arcgis/rest/services/qhhx/intersect/GPServer/intersect')\r\n      let gp = new Geoprocessor('http://192.168.1.158:6080/arcgis/rest/services/qhhx/insect/GPServer/insect')\r\n\r\n      let featureSet = new FeatureSet()\r\n\r\n      featureSet.features = [this.graphic]\r\n      /* let params = {\r\n        polygon: featureSet,\r\n        redline: 'wgs'\r\n      } */\r\n\r\n      let params = {\r\n        polygon: featureSet,\r\n        redline: 'redline_Project'\r\n      }\r\n      console.log(featureSet)\r\n      gp.submitJob(params).then(result => {\r\n        if (result.jobStatus === 'job-succeeded') {\r\n          gp.getResultData(result.jobId, 'out').then(res => {\r\n            console.log(res)\r\n            let polySym = {\r\n              type: 'simple-fill', // autocasts as new SimpleFillSymbol()\r\n              color: [140, 10, 2, 0.8],\r\n              outline: {\r\n                color: [0, 0, 0, 0.8],\r\n                width: 2\r\n              }\r\n            }\r\n            let graphicArr = res.value.features.map(feature => {\r\n              feature.symbol = polySym\r\n              // 计算面积\r\n              feature.attributes.shapearea = geometryEngine.geodesicArea(feature.geometry, 'square-meters')\r\n              return feature\r\n            })\r\n            let insercLayer = new GraphicLayer()\r\n            insercLayer.addMany(graphicArr)\r\n            this.map.add(insercLayer)\r\n          })\r\n        }\r\n      })\r\n    }\r\n  },\r\n  mounted () {\r\n    this.createMap()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./demo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./demo.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./demo.vue?vue&type=template&id=cb28cdc8&scoped=true&\"\nimport script from \"./demo.vue?vue&type=script&lang=js&\"\nexport * from \"./demo.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"cb28cdc8\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}