{"version":3,"sources":["webpack:///./src/views/demo/demo.vue?85ac","webpack:///src/views/demo/demo.vue","webpack:///./src/views/demo/demo.vue?0afa","webpack:///./src/views/demo/demo.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticStyle","height","attrs","id","on","click","clickBtn","_v","staticRenderFns","demovue_type_script_lang_js_","name","methods","createMap","_createMap","Object","asyncToGenerator","regeneratorRuntime","mark","_callee","MapView","Map","Basemap","Point","BaseTileLayer","Request","geometryEngine","GraphicLayer","Graphic","FeatureLayer","Polygon","WebTileLayer","polySym","TDT","td","customBasemap","polygon","bufferLayer","_this2","wrap","_context","prev","next","arcgisTools","sent","GraphicsLayer","type","color","outline","width","layerRedLine","url","mapConfig","serverUrl","opacity","outFields","popupTemplate","title","content","fieldInfos","fieldName","label","createSubclass","properties","urlTemplate","getTileUrl","level","row","col","fetchTile","_this","responseType","then","response","image","data","tileInfo","size","canvas","document","createElement","context","getContext","drawImage","baseLayers","map","basemap","view","container","center","centerPoint","zoom","longitude","latitude","paths","spatialReference","wkid","rings","buffer","geodesicBuffer","union","pop","graphic","geometry","symbol","add","evt","toMap","x","y","stop","apply","arguments","_clickBtn","_callee2","Geoprocessor","FeatureSet","gp","featureSet","params","_this3","_context2","ImageParameters","features","redline","console","log","submitJob","result","jobStatus","getResultData","jobId","res","graphicArr","value","feature","attributes","shapearea","geodesicArea","insercLayer","addMany","mounted","demo_demovue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__"],"mappings":"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","file":"js/chunk-2d0b309e.448112b5.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticStyle:{\"height\":\"500px\"},attrs:{\"id\":\"map\"}}),_c('Button',{on:{\"click\":_vm.clickBtn}},[_vm._v(\"按钮\")])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <div style=\"height: 500px\" id=\"map\">\r\n    </div>\r\n    <Button @click=\"clickBtn\">按钮</Button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport config from '../../setting/mapConfig'\r\nimport arcgisPackage from '../../utils/arcgisTools'\r\nexport default {\r\n  name: 'demo',\r\n  methods: {\r\n    async createMap () {\r\n      let MapView = await arcgisPackage.MapView\r\n      let Map = await arcgisPackage.Map\r\n      let Basemap = await arcgisPackage.Basemap\r\n      let Point = await arcgisPackage.Point\r\n      let BaseTileLayer = await arcgisPackage.BaseTileLayer\r\n      let Request = await arcgisPackage.Request\r\n      let geometryEngine = await arcgisPackage.geometryEngine\r\n      let GraphicLayer = await arcgisPackage.GraphicsLayer\r\n      let Graphic = await arcgisPackage.Graphic\r\n      let FeatureLayer = await arcgisPackage.FeatureLayer\r\n      let Polygon = await arcgisPackage.Polygon\r\n      let WebTileLayer = await arcgisPackage.WebTileLayer\r\n      let polySym = {\r\n        type: 'simple-fill', // autocasts as new SimpleFillSymbol()\r\n        color: [140, 140, 222, 0.5],\r\n        outline: {\r\n          color: [0, 0, 0, 0.5],\r\n          width: 2\r\n        }\r\n      }\r\n\r\n      this.layerRedLine = new FeatureLayer({\r\n        url: config.serverUrl + '/arcgis/rest/services/qhhx/hongxian/MapServer',\r\n        opacity: 0.7,\r\n        outFields: ['*'],\r\n        popupTemplate: {\r\n          title: '{name}',\r\n          content: [\r\n            {\r\n              type: 'fields',\r\n              fieldInfos: [{\r\n                fieldName: 'STATENAME',\r\n                label: '所属地区'\r\n              }, {\r\n                fieldName: '面积',\r\n                label: '面积（平方米）'\r\n              }]\r\n            }\r\n          ]\r\n        }\r\n      })\r\n\r\n      // 天地图影像地图\r\n      let TDT = BaseTileLayer.createSubclass({\r\n        properties: {\r\n          urlTemplate: null\r\n        },\r\n        getTileUrl: function (level, row, col) {\r\n          let url = 'http://t' + col % 8 + '.tianditu.gov.cn/DataServer?T=img_w&tk=12b886b3d0f324bd6032c29503972e7c&x=' + col + '&y=' + row + '&l=' + level\r\n          // var url = \"http://t0.tianditu.gov.cn/cva_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX=\"+level+\"&TILEROW=\"+row+\"&TILECOL=\"+col+\"&tk=12b886b3d0f324bd6032c29503972e7c\";\r\n          return url\r\n        },\r\n        fetchTile: function (level, row, col) {\r\n          let url = this.getTileUrl(level, row, col)\r\n          return Request(url, {\r\n            responseType: 'image'\r\n          })\r\n            .then((response) => {\r\n              let image = response.data\r\n              let width = this.tileInfo.size[0]\r\n              let height = this.tileInfo.size[0]\r\n\r\n              let canvas = document.createElement('canvas')\r\n              let context = canvas.getContext('2d')\r\n              canvas.width = width\r\n              canvas.height = height\r\n\r\n              context.drawImage(image, 0, 0, width, height)\r\n\r\n              return canvas\r\n            })\r\n        }\r\n      })\r\n\r\n      let tdtylayer = new TDT()\r\n\r\n      let td = new WebTileLayer({\r\n        urlTemplate: 'http://t2.tianditu.gov.cn/img_c/wmts?tk=12b886b3d0f324bd6032c29503972e7c&TILECOL={col}&TILEROW={row}&TILEMATRIX={level}&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=c&FORMAT=tiles&SERVICE=WMTS'\r\n      })\r\n      let customBasemap = new Basemap({\r\n        baseLayers: [],\r\n        title: 'Custom Basemap',\r\n        id: 'myBasemap'\r\n      })\r\n\r\n      this.map = new Map({\r\n        basemap: customBasemap\r\n      })\r\n      this.view = new MapView({\r\n        map: this.map,\r\n        container: 'map',\r\n        center: config.centerPoint,\r\n        zoom: 7\r\n      })\r\n\r\n      let point = new Point({\r\n        type: 'point',\r\n        longitude: 98.880521,\r\n        latitude: 38.762178\r\n      })\r\n\r\n      let polyline = {\r\n        type: 'polyline',\r\n        paths: [\r\n          [\r\n            [98.880521, 38.762178],\r\n            [98.990521, 38.772178]\r\n          ]\r\n        ],\r\n        spatialReference: { wkid: 4326 }\r\n      }\r\n      let polygon = new Polygon({\r\n        rings: [\r\n          [\r\n            [98.880521, 38.762178],\r\n            [98.990521, 38.972178],\r\n            [98.790521, 38.672178],\r\n            [98.880521, 38.762178]\r\n          ]\r\n        ],\r\n        spatialReference: { wkid: 4326 }\r\n      })\r\n      let bufferLayer = new GraphicLayer()\r\n      this.buffer = geometryEngine.geodesicBuffer(polygon, 0.5, 'kilometers', false)\r\n      this.buffer = geometryEngine.union([this.buffer, polygon])\r\n      // console.log(this.buffer.rings[1])\r\n      this.buffer.rings.pop()\r\n      // this.buffer.removeRing(this.buffer.rings[1])\r\n      this.graphic = new Graphic({\r\n        geometry: this.buffer,\r\n        symbol: polySym\r\n      })\r\n      bufferLayer.add(this.graphic)\r\n      this.map.add(td)\r\n      this.map.add(this.layerRedLine)\r\n      this.map.add(bufferLayer)\r\n      this.bufferLayer = bufferLayer\r\n\r\n      this.view.on('pointer-move', evt => {\r\n        point = this.view.toMap({ x: evt.x, y: evt.y })\r\n        /* console.log(mp.x + '-' + mp.y) */\r\n      })\r\n    },\r\n    async clickBtn () {\r\n      let Geoprocessor = await arcgisPackage.Geoprocessor\r\n      let FeatureSet = await arcgisPackage.FeatureSet\r\n      let ImageParameters = await arcgisPackage.ImageParameters\r\n      let Graphic = await arcgisPackage.Graphic\r\n      let GraphicLayer = await arcgisPackage.GraphicsLayer\r\n      let geometryEngine = await arcgisPackage.geometryEngine\r\n      // let gp = new Geoprocessor('http://192.168.1.158:6080/arcgis/rest/services/qhhx/intersect/GPServer/intersect')\r\n      let gp = new Geoprocessor('http://192.168.1.158:6080/arcgis/rest/services/qhhx/insect/GPServer/insect')\r\n\r\n      let featureSet = new FeatureSet()\r\n\r\n      featureSet.features = [this.graphic]\r\n      /* let params = {\r\n        polygon: featureSet,\r\n        redline: 'wgs'\r\n      } */\r\n\r\n      let params = {\r\n        polygon: featureSet,\r\n        redline: 'redline_Project'\r\n      }\r\n      console.log(featureSet)\r\n      gp.submitJob(params).then(result => {\r\n        if (result.jobStatus === 'job-succeeded') {\r\n          gp.getResultData(result.jobId, 'out').then(res => {\r\n            console.log(res)\r\n            let polySym = {\r\n              type: 'simple-fill', // autocasts as new SimpleFillSymbol()\r\n              color: [140, 10, 2, 0.8],\r\n              outline: {\r\n                color: [0, 0, 0, 0.8],\r\n                width: 2\r\n              }\r\n            }\r\n            let graphicArr = res.value.features.map(feature => {\r\n              feature.symbol = polySym\r\n              // 计算面积\r\n              feature.attributes.shapearea = geometryEngine.geodesicArea(feature.geometry, 'square-meters')\r\n              return feature\r\n            })\r\n            let insercLayer = new GraphicLayer()\r\n            insercLayer.addMany(graphicArr)\r\n            this.map.add(insercLayer)\r\n          })\r\n        }\r\n      })\r\n    }\r\n  },\r\n  mounted () {\r\n    this.createMap()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./demo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./demo.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./demo.vue?vue&type=template&id=44253896&scoped=true&\"\nimport script from \"./demo.vue?vue&type=script&lang=js&\"\nexport * from \"./demo.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"44253896\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}