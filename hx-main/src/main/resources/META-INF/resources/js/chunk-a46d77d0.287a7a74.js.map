{"version":3,"sources":["webpack:///./node_modules/_@babel_runtime@7.6.3@@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/_@babel_runtime@7.6.3@@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/_@babel_runtime@7.6.3@@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///./node_modules/_@babel_runtime@7.6.3@@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./src/utils/arcgisTools.js","webpack:///./src/utils/layers.js"],"names":["_arrayWithHoles","arr","Array","isArray","_iterableToArrayLimit","i","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","_nonIterableRest","TypeError","_slicedToArray","__arcgisUrl","MapView","SceneView","Map","Basemap","TileLayer","FeatureLayer","GraphicsLayer","ElevationLayer","Graphic","Point","SpatialReference","PictureMarkerSymbol","WebTileLayer","WMTSLayer","TileInfo","Extent","BaseTileLayer","Request","LayerList","Print","DistanceMeasurement2D","AreaMeasurement2D","ScaleBar","BasemapToggle","Legend","geometryEngine","Geoprocessor","FeatureSet","ImageParameters","Draw","Field","Polygon","WebMercatorUtils","Fullscreen","BasemapGallery","esriConfig","projection","Compass","Sketch","GeoJSONLayer","SimpleRenderer","Font","TextSymbol","Color","MapImageLayer","GeometryService","BufferParameters","Polyline","AreasAndLengthsParameters","WMSLayer","RasterData","__arcgis","arcgisPackage","Proxy","get","target","key","receiver","val","loadModules","url","config","baseUrl","dojoConfig","dojoUrl","set","console","warn","tdtlayer","getUrl","layer","name","ImageBaseMapUrl","tdtyNoteslayer","log","notesVectorMapUrl","notesImageMapUrl","tdtclayer","vectorBaseMapUrl","tdtcNoteslayer","redLine","id","layerRedLine","title","redlineUrl","outFields","opacity","popupTemplate","expressionInfos","expression","content","type","fieldInfos","fieldName","label","format","digitSeparator","places","legend","backgroundColor","border","renderer","symbol","size","color","outline","width","nameArcade","nameClass","labelExpressionInfo","haloSize","haloColor","labelingInfo","redLineDp","shengjie","serverUrl","weight","getNewList","data","res","code","forEach","serviceUrl","redlineShpUrl","ftpShpUrl","remarkLayerUrl","bspLayerUrl","this","$Notice","error","desc","msg","markerLayer","layerId","bspLayer","guaidianlayer","guaidianLayerUrl"],"mappings":"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","file":"js/chunk-a46d77d0.287a7a74.js","sourcesContent":["export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","/**\r\n * @Description:提供arcgis开放的变量\r\n * @author 张淼\r\n * @date 2019/4/9\r\n*/\r\nimport { loadModules } from 'esri-loader'\r\nimport config from '../setting/mapConfig'\r\n\r\n// 配置arcgis中各个包与相对应的路径\r\nconst __arcgisUrl = {\r\n  MapView: 'esri/views/MapView',\r\n  SceneView: 'esri/views/SceneView',\r\n  Map: 'esri/Map',\r\n  Basemap: 'esri/Basemap',\r\n  TileLayer: 'esri/layers/TileLayer',\r\n  FeatureLayer: 'esri/layers/FeatureLayer',\r\n  GraphicsLayer: 'esri/layers/GraphicsLayer',\r\n  ElevationLayer: 'esri/layers/ElevationLayer',\r\n  Graphic: 'esri/Graphic',\r\n  Point: 'esri/geometry/Point',\r\n  SpatialReference: 'esri/geometry/SpatialReference',\r\n  PictureMarkerSymbol: 'esri/symbols/PictureMarkerSymbol',\r\n  WebTileLayer: 'esri/layers/WebTileLayer',\r\n  WMTSLayer: 'esri/layers/WMTSLayer',\r\n  TileInfo: 'esri/layers/support/TileInfo',\r\n  Extent: 'esri/geometry/Extent',\r\n  BaseTileLayer: 'esri/layers/BaseTileLayer',\r\n  Request: 'esri/request',\r\n  LayerList: 'esri/widgets/LayerList',\r\n  Print: 'esri/widgets/Print',\r\n  DistanceMeasurement2D: 'esri/widgets/DistanceMeasurement2D',\r\n  AreaMeasurement2D: 'esri/widgets/AreaMeasurement2D',\r\n  ScaleBar: 'esri/widgets/ScaleBar',\r\n  BasemapToggle: 'esri/widgets/BasemapToggle',\r\n  Legend: 'esri/widgets/Legend',\r\n  geometryEngine: 'esri/geometry/geometryEngine',\r\n  Geoprocessor: 'esri/tasks/Geoprocessor',\r\n  FeatureSet: 'esri/tasks/support/FeatureSet',\r\n  ImageParameters: 'esri/layers/support/ImageParameters',\r\n  Draw: 'esri/views/2d/draw/Draw',\r\n  Field: 'esri/layers/support/Field',\r\n  Polygon: 'esri/geometry/Polygon',\r\n  WebMercatorUtils: 'esri/geometry/support/webMercatorUtils',\r\n  Fullscreen: 'esri/widgets/Fullscreen',\r\n  BasemapGallery: 'esri/widgets/BasemapGallery',\r\n  esriConfig: \"esri/config\",\r\n  projection: \"esri/geometry/projection\",\r\n  Compass: 'esri/widgets/Compass',\r\n  Sketch: 'esri/widgets/Sketch',\r\n  GeoJSONLayer: 'esri/layers/GeoJSONLayer',\r\n  SimpleRenderer: 'esri/renderers/SimpleRenderer',\r\n  Font: 'esri/symbols/Font',\r\n  TextSymbol: 'esri/symbols/TextSymbol',\r\n  Color: 'esri/Color',\r\n  MapImageLayer: 'esri/layers/MapImageLayer',\r\n  GeometryService: 'esri/tasks/GeometryService',\r\n  BufferParameters: 'esri/tasks/support/BufferParameters',\r\n  Polyline: 'esri/geometry/Polyline',\r\n  AreasAndLengthsParameters: 'esri/tasks/support/AreasAndLengthsParameters',\r\n  WMSLayer: 'esri/layers/WMSLayer',\r\n  RasterData: 'esri/tasks/support/RasterData'\r\n}\r\n\r\n// 不暴漏在外的存储对象\r\nconst __arcgis = {}\r\n\r\n// 定义暴露的arcgis变量\r\nconst arcgisPackage = new Proxy({}, {\r\n  // 拦截取值\r\n  async get (target, key, receiver) {\r\n    let val = {}\r\n    if (typeof __arcgis[key] === 'undefined') {\r\n      [val] = await loadModules([__arcgisUrl[key]], {\r\n        url: config.baseUrl,\r\n        dojoConfig: {\r\n          baseUrl: config.dojoUrl\r\n        }\r\n      })\r\n      __arcgis[key] = val\r\n    } else {\r\n      val = __arcgis[key]\r\n    }\r\n\r\n    return val\r\n  },\r\n  set () {\r\n    console.warn('arcgisPackage对象属性不能赋值')\r\n  }\r\n})\r\n\r\nexport default arcgisPackage\r\n","import arcgisPackage from './arcgisTools'\r\nimport config from '../setting/mapConfig'\r\nimport { getNewList } from '@/api/systemManage'\r\n\r\n// 天地图影像地图 OGC服务\r\n/* export const tdtlayer = async () => {\r\n  let BaseTileLayer = await arcgisPackage.BaseTileLayer\r\n  let Request = await arcgisPackage.Request\r\n  let TDT = await BaseTileLayer.createSubclass({\r\n    properties: {\r\n      urlTemplate: null\r\n    },\r\n    getTileUrl: function (level, row, col) {\r\n      let url = 'http://t' + col % 8 + '.tianditu.gov.cn/DataServer?T=img_w&tk=12b886b3d0f324bd6032c29503972e7c&x=' + col + '&y=' + row + '&l=' + level\r\n      // var url = \"http://t0.tianditu.gov.cn/cva_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX=\"+level+\"&TILEROW=\"+row+\"&TILECOL=\"+col+\"&tk=12b886b3d0f324bd6032c29503972e7c\";\r\n      return url\r\n    },\r\n    fetchTile: function (level, row, col) {\r\n      let url = this.getTileUrl(level, row, col)\r\n      return Request(url, {\r\n        responseType: 'image'\r\n      })\r\n        .then((response) => {\r\n          let image = response.data\r\n          let width = this.tileInfo.size[0]\r\n          let height = this.tileInfo.size[0]\r\n\r\n          let canvas = document.createElement('canvas')\r\n          let context = canvas.getContext('2d')\r\n          canvas.width = width\r\n          canvas.height = height\r\n\r\n          context.drawImage(image, 0, 0, width, height)\r\n\r\n          return canvas\r\n        })\r\n    }\r\n  })\r\n  let layer = await new TDT()\r\n  return layer\r\n} */\r\n\r\n// 影像底图 rest切片服务\r\nexport const tdtlayer = async () => {\r\n  let TileLayer = await arcgisPackage.TileLayer\r\n  await getUrl()\r\n  let layer = new TileLayer({\r\n    name: '影像底图',\r\n    url: config.ImageBaseMapUrl\r\n  })\r\n  return layer\r\n}\r\n\r\n// 天地图影像标注图层\r\n/* export const tdtyNoteslayer = async () => {\r\n  let BaseTileLayer = await arcgisPackage.BaseTileLayer\r\n  let Request = await arcgisPackage.Request\r\n  let TDT = await BaseTileLayer.createSubclass({\r\n    properties: {\r\n      urlTemplate: null\r\n    },\r\n    getTileUrl: function (level, row, col) {\r\n      let url = 'http://t' + col % 8 + '.tianditu.gov.cn/DataServer?T=cia_w&tk=12b886b3d0f324bd6032c29503972e7c&x=' + col + '&y=' + row + '&l=' + level\r\n      // var url = \"http://t0.tianditu.gov.cn/cva_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX=\"+level+\"&TILEROW=\"+row+\"&TILECOL=\"+col+\"&tk=12b886b3d0f324bd6032c29503972e7c\";\r\n      return url\r\n    },\r\n    fetchTile: function (level, row, col) {\r\n      let url = this.getTileUrl(level, row, col)\r\n      return Request(url, {\r\n        responseType: 'image'\r\n      })\r\n        .then((response) => {\r\n          let image = response.data\r\n          let width = this.tileInfo.size[0]\r\n          let height = this.tileInfo.size[0]\r\n\r\n          let canvas = document.createElement('canvas')\r\n          let context = canvas.getContext('2d')\r\n          canvas.width = width\r\n          canvas.height = height\r\n          context.drawImage(image, 0, 0, width, height)\r\n          return canvas\r\n        })\r\n    }\r\n  })\r\n  let layer = new TDT()\r\n  return layer\r\n} */\r\n\r\n// 影像底图标注 rest切片服务\r\nexport const tdtyNoteslayer = async () => {\r\n  let TileLayer = await arcgisPackage.TileLayer\r\n  await getUrl()\r\n  console.log(config.notesVectorMapUrl)\r\n  let layer = new TileLayer({\r\n    name: '影像底图标注',\r\n    url: config.notesImageMapUrl\r\n  })\r\n  return layer\r\n}\r\n\r\n// 天地图矢量图层\r\n/* export const tdtclayer = async () => {\r\n  let BaseTileLayer = await arcgisPackage.BaseTileLayer\r\n  let Request = await arcgisPackage.Request\r\n  let TDT = await BaseTileLayer.createSubclass({\r\n    properties: {\r\n      urlTemplate: null\r\n    },\r\n    getTileUrl: function (level, row, col) {\r\n      let url = 'http://t' + col % 8 + '.tianditu.gov.cn/DataServer?T=vec_w&tk=12b886b3d0f324bd6032c29503972e7c&x=' + col + '&y=' + row + '&l=' + level\r\n      // var url = \"http://t0.tianditu.gov.cn/cva_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX=\"+level+\"&TILEROW=\"+row+\"&TILECOL=\"+col+\"&tk=12b886b3d0f324bd6032c29503972e7c\";\r\n      return url\r\n    },\r\n    fetchTile: function (level, row, col) {\r\n      let url = this.getTileUrl(level, row, col)\r\n      return Request(url, {\r\n        responseType: 'image'\r\n      })\r\n        .then((response) => {\r\n          let image = response.data\r\n          let width = this.tileInfo.size[0]\r\n          let height = this.tileInfo.size[0]\r\n\r\n          let canvas = document.createElement('canvas')\r\n          let context = canvas.getContext('2d')\r\n          canvas.width = width\r\n          canvas.height = height\r\n          context.drawImage(image, 0, 0, width, height)\r\n          return canvas\r\n        })\r\n    }\r\n  })\r\n  let layer = new TDT()\r\n  return layer\r\n} */\r\n\r\n// 影像底图 rest服务\r\nexport const tdtclayer = async () => {\r\n  let TileLayer = await arcgisPackage.TileLayer\r\n  await getUrl()\r\n  let layer = new TileLayer({\r\n    name: '矢量底图',\r\n    url: config.vectorBaseMapUrl\r\n  })\r\n  return layer\r\n}\r\n\r\n// 天地图矢量标注图层\r\n/* export const tdtcNoteslayer = async () => {\r\n  let BaseTileLayer = await arcgisPackage.BaseTileLayer\r\n  let Request = await arcgisPackage.Request\r\n  let TDT = await BaseTileLayer.createSubclass({\r\n    properties: {\r\n      urlTemplate: null\r\n    },\r\n    getTileUrl: function (level, row, col) {\r\n      let url = 'http://t' + col % 8 + '.tianditu.gov.cn/DataServer?T=cva_w&tk=12b886b3d0f324bd6032c29503972e7c&x=' + col + '&y=' + row + '&l=' + level\r\n      // var url = \"http://t0.tianditu.gov.cn/cva_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX=\"+level+\"&TILEROW=\"+row+\"&TILECOL=\"+col+\"&tk=12b886b3d0f324bd6032c29503972e7c\";\r\n      return url\r\n    },\r\n    fetchTile: function (level, row, col) {\r\n      let url = this.getTileUrl(level, row, col)\r\n      return Request(url, {\r\n        responseType: 'image'\r\n      })\r\n        .then((response) => {\r\n          let image = response.data\r\n          let width = this.tileInfo.size[0]\r\n          let height = this.tileInfo.size[0]\r\n\r\n          let canvas = document.createElement('canvas')\r\n          let context = canvas.getContext('2d')\r\n          canvas.width = width\r\n          canvas.height = height\r\n          context.drawImage(image, 0, 0, width, height)\r\n          return canvas\r\n        })\r\n    }\r\n  })\r\n  let layer = new TDT()\r\n  return layer\r\n} */\r\n\r\n// 矢量底图标注 rest切片服务\r\nexport const tdtcNoteslayer = async () => {\r\n  let TileLayer = await arcgisPackage.TileLayer\r\n  await getUrl()\r\n  console.log(config.notesVectorMapUrl)\r\n  let layer = new TileLayer({\r\n    name: '矢量底图标注',\r\n    url: config.notesVectorMapUrl\r\n  })\r\n  return layer\r\n}\r\n\r\n// 红线斑块图层\r\nexport const redLine = async (id) => {\r\n  let FeatureLayer = await arcgisPackage.FeatureLayer\r\n  await getUrl()\r\n  let layerRedLine = new FeatureLayer({\r\n    id: id === undefined ? 0 : id.toString(),\r\n    name: '红线斑块',\r\n    title: '红线斑块',\r\n    url: config.redlineUrl,\r\n    outFields: ['*'],\r\n    opacity: 0.7,\r\n    popupTemplate: {\r\n      title: '红线斑块',\r\n      expressionInfos: [\r\n        {\r\n          name: 'redLineType',\r\n          title: '红线类型',\r\n          expression:\r\n            `if ($feature.type == \"01\") {\r\n                        return '生态功能重要区'\r\n                }\r\n                else if($feature.type == \"02\") {\r\n                        return '生态环境敏感区'\r\n                }`\r\n        },\r\n        {\r\n          name: 'redLineAttribute',\r\n          title: '功能属性',\r\n          expression:\r\n            `if ($feature.attribute == \"01\") {\r\n                        return '水土流失'\r\n                }\r\n                else if($feature.attribute == \"02\") {\r\n                        return '土地沙化'\r\n                }\r\n                else if($feature.attribute == \"02\") {\r\n                        return '石漠化'\r\n                }\r\n                else if($feature.attribute == \"02\") {\r\n                        return '盐渍化'\r\n                }\r\n                else if($feature.attribute == \"02\") {\r\n                        return '其他敏感性'\r\n                }`\r\n        }\r\n      ],\r\n      content: [\r\n        {\r\n          type: 'fields',\r\n          fieldInfos: [\r\n            {\r\n              fieldName: '编号',\r\n              label: '红线编码'\r\n            },\r\n            {\r\n              fieldName: '县_区_',\r\n              label: '所在县'\r\n            },\r\n            {\r\n              fieldName: '斑块名称',\r\n              label: '斑块名称'\r\n            },\r\n            {\r\n              fieldName: '面积',\r\n              label: '斑块面积/km²',\r\n              format: {\r\n                digitSeparator: true,\r\n                places: 2\r\n              }\r\n            },\r\n            {\r\n              fieldName: 'expression/redLineType'\r\n            },\r\n            {\r\n              fieldName: 'expression/redLineAttribute'\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    legend: {\r\n      type: 0,\r\n      backgroundColor: 'rgba(255, 255, 255, 0)',\r\n      border: '2px solid red'\r\n    }\r\n  })\r\n  layerRedLine.renderer = {\r\n    type: 'simple',\r\n    symbol: {\r\n      type: 'simple-fill',\r\n      size: 6,\r\n      color: [0, 0, 0, 0.01],\r\n      outline: {\r\n        width: 0.8,\r\n        color: [255, 0, 0, 0.8]\r\n      }\r\n    },\r\n    label: '红线斑块'\r\n  }\r\n  const nameArcade = '$feature.hxcode'\r\n  const nameClass = {\r\n    labelExpressionInfo: {\r\n      expression: nameArcade\r\n    },\r\n    symbol: {\r\n      type: 'text',\r\n      color: 'black',\r\n      haloSize: 1,\r\n      haloColor: 'white'\r\n    }\r\n  }\r\n  layerRedLine.labelingInfo = [nameClass]\r\n  return layerRedLine\r\n}\r\n\r\n// 红线斑块图层-删除弹框\r\nexport const redLineDp = async (id) => {\r\n  let FeatureLayer = await arcgisPackage.FeatureLayer\r\n  await getUrl()\r\n  let layerRedLine = new FeatureLayer({\r\n    id: id === undefined ? 0 : id.toString(),\r\n    name: '红线斑块',\r\n    title: '红线斑块',\r\n    url: config.redlineUrl,\r\n    outFields: ['*'],\r\n    opacity: 0.7,\r\n    legend: {\r\n      type: 0,\r\n      backgroundColor: 'rgba(255, 255, 255, 0)',\r\n      border: '2px solid red'\r\n    }\r\n  })\r\n  layerRedLine.renderer = {\r\n    type: 'simple',\r\n    symbol: {\r\n      type: 'simple-fill',\r\n      size: 6,\r\n      color: [0, 0, 0, 0.01],\r\n      outline: {\r\n        width: 0.8,\r\n        color: [255, 0, 0, 0.8]\r\n      }\r\n    },\r\n    label: '红线斑块'\r\n  }\r\n  const nameArcade = '$feature.hxcode'\r\n  const nameClass = {\r\n    labelExpressionInfo: {\r\n      expression: nameArcade\r\n    },\r\n    symbol: {\r\n      type: 'text',\r\n      color: 'black',\r\n      haloSize: 1,\r\n      haloColor: 'white'\r\n    }\r\n  }\r\n  layerRedLine.labelingInfo = [nameClass]\r\n  return layerRedLine\r\n}\r\n\r\n// 省界\r\nexport const shengjie = async (id) => {\r\n  let FeatureLayer = await arcgisPackage.FeatureLayer\r\n  let layer = new FeatureLayer({\r\n    id: id === undefined ? 0 : id.toString(),\r\n    name: '省界',\r\n    url: config.serverUrl + '/arcgis/rest/services/qhhx/shengjie/MapServer',\r\n    legend: {\r\n      type: 2,\r\n      backgroundColor: 'rgba(200, 10, 100, 1)',\r\n      weight: 3\r\n    }\r\n  })\r\n  return layer\r\n}\r\n// 市界\r\nexport const shijie = async (id) => {\r\n  let FeatureLayer = await arcgisPackage.FeatureLayer\r\n  let layer = new FeatureLayer({\r\n    id: id === undefined ? 0 : id.toString(),\r\n    name: '市界',\r\n    url: config.serverUrl + '/arcgis/rest/services/qhhx/shijie/MapServer',\r\n    legend: {\r\n      type: 2,\r\n      backgroundColor: 'rgba(200, 10, 100, 1)',\r\n      weight: 3\r\n    }\r\n  })\r\n  layer.renderer = {\r\n    type: 'simple',\r\n    symbol: {\r\n      type: 'simple-fill',\r\n      size: 6,\r\n      color: [0, 0, 0, 0.01],\r\n      outline: {\r\n        width: 0.8,\r\n        color: [255, 0, 0, 0.8]\r\n      }\r\n    }\r\n  }\r\n  return layer\r\n}\r\n\r\n// 县界\r\nexport const xianjie = async (id) => {\r\n  let FeatureLayer = await arcgisPackage.FeatureLayer\r\n  let layer = new FeatureLayer({\r\n    id: id === undefined ? 0 : id.toString(),\r\n    name: '县界',\r\n    url: config.serverUrl + '/arcgis/rest/services/qhhx/xianjie/MapServer',\r\n    legend: {\r\n      type: 2,\r\n      backgroundColor: 'rgba(200, 10, 100, 1)',\r\n      weight: 3\r\n    }\r\n  })\r\n  return layer\r\n}\r\n\r\n// 脆弱性评估\r\nexport const vulnerability = async (id) => {\r\n  let MapImageLayer = await arcgisPackage.MapImageLayer\r\n  let layer = new MapImageLayer({\r\n    id: id === undefined ? 0 : id.toString(),\r\n    name: '省界',\r\n    url: 'https://120.24.69.160:6443' + '/arcgis/rest/services/qhhx/vulnerability/MapServer'\r\n  })\r\n  return layer\r\n}\r\n\r\n// 重要性评估\r\nexport const sensitivity = async (id) => {\r\n  let MapImageLayer = await arcgisPackage.MapImageLayer\r\n  let layer = new MapImageLayer({\r\n    id: id === undefined ? 0 : id.toString(),\r\n    name: '省界',\r\n    url: 'https://120.24.69.160:6443' + '/arcgis/rest/services/qhhx/sensitivity/MapServer'\r\n  })\r\n  return layer\r\n}\r\n\r\nasync function getUrl () {\r\n  if (config.redlineUrl && config.vectorBaseMapUrl && config.ImageBaseMapUrl) {\r\n    return\r\n  }\r\n  let res = await getNewList({ data: {} })\r\n  if (res.data.code === '0000') {\r\n    res.data.data.forEach(val => {\r\n      switch (val.type) {\r\n        case 1:\r\n          config.redlineUrl = val.serviceUrl\r\n          config.redlineShpUrl = val.ftpShpUrl\r\n          break\r\n        case 2:\r\n          config.remarkLayerUrl = val.serviceUrl\r\n          break\r\n        case 3:\r\n          config.bspLayerUrl = val.serviceUrl\r\n          break\r\n        case 4:\r\n          break\r\n        case 5:\r\n          config.vectorBaseMapUrl = val.serviceUrl\r\n          break\r\n        case 6:\r\n          config.ImageBaseMapUrl = val.serviceUrl\r\n          break\r\n        case 7:\r\n          config.notesVectorMapUrl = val.serviceUrl\r\n          break\r\n        case 8:\r\n          config.notesImageMapUrl = val.serviceUrl\r\n          break\r\n        default:\r\n          break\r\n      }\r\n    })\r\n  } else {\r\n    this.$Notice.error({ title: '获取参数设置信息失败', desc: res.data.msg })\r\n  }\r\n}\r\n\r\n/* 界桩的图层 */\r\nexport const markerLayer = async (layerId) => {\r\n  getUrl()\r\n  let FeatureLayer = await arcgisPackage.FeatureLayer\r\n  let layer = new FeatureLayer({\r\n    name: '界桩',\r\n    id: layerId,\r\n    url: config.remarkLayerUrl,\r\n    popupTemplate: {\r\n      title: '界桩',\r\n      content: [{\r\n        type: 'fields',\r\n        fieldInfos: [{\r\n          fieldName: '编号',\r\n          label: '编号'\r\n        }]\r\n      }]\r\n    }\r\n  })\r\n  return layer\r\n}\r\n\r\n/* 标识牌的图层 */\r\nexport const bspLayer = async (layerId) => {\r\n  getUrl()\r\n  console.log(config.bspLayerUrl)\r\n  let FeatureLayer = await arcgisPackage.FeatureLayer\r\n  let layer = new FeatureLayer({\r\n    name: '标识牌',\r\n    id: layerId,\r\n    url: config.bspLayerUrl,\r\n    title: '标识牌',\r\n    outFields: ['*'],\r\n    popupTemplate: {\r\n      title: '标识牌',\r\n      content: [{\r\n        type: 'fields',\r\n        fieldInfos: [{\r\n          fieldName: '编号',\r\n          label: '编号'\r\n        }, {\r\n          fieldName: '设立时间',\r\n          label: '设立时间'\r\n        }]\r\n      }]\r\n    }\r\n  })\r\n  return layer\r\n}\r\n\r\n/* 拐点图层 */\r\nexport const guaidianlayer = async (layerId) => {\r\n  getUrl()\r\n  console.log(config.guaidianLayerUrl)\r\n  let FeatureLayer = await arcgisPackage.FeatureLayer\r\n  let layer = FeatureLayer({\r\n    name: '拐点',\r\n    id: layerId,\r\n    url: config.guaidianLayerUrl\r\n  })\r\n  return layer\r\n}\r\n"],"sourceRoot":""}